const { Client, MessageMedia, LocalAuth } = require("whatsapp-web.js");
const qrcode = require('qrcode-terminal');
const path = require('path');



const client = new Client({
    authStrategy: new LocalAuth()
});




let welcomeSent = {};
let typingTimer;


client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});



client.on('ready', () => {
    console.log('Client is ready!');
    console.log('Pronto...');
});



client.on('message', async msg => {

    if (!welcomeSent[msg.from]) {
        welcomeSent[msg.from] = true;
        const imagePath = path.join(__dirname, './ninasuporte.png');
        const media = MessageMedia.fromFilePath(imagePath);

        await client.sendMessage(msg.from, media, { sendMediaAsDocument: false });
        await client.sendMessage(msg.from, `
üëã Ol√°! Bem-vindo ao Suporte Nix, eu sou a Nina. Como posso te ajudar hoje?

ü§î Por favor, escolha uma das op√ß√µes abaixo para que eu possa direcionar sua solicita√ß√£o:

1. Problemas t√©cnicos ou erros no aplicativo
2. D√∫vidas sobre funcionalidades e uso do aplicativo
3. Quest√µes relacionadas a pagamentos e assinaturas
4. Tutorial sobre o nosso app
5. Falar diretamente com o suporte Nix üß°

Por favor, responda com o n√∫mero correspondente √† sua consulta. Se preferir, digite "Outro" para falar sobre um assunto n√£o listado.

üí¨ Estou aqui para ajudar!

        `);
    } else {
        // Se j√° enviou a mensagem de boas-vindas, trata a resposta do usu√°rio
        handleUserResponse(msg);
    }
});


const handleUserResponse = async (msg) => {
    const response = msg.body;

    if (!isNaN(response)) {

        switch (response) {
            case '1':
                await client.sendMessage(msg.from, 'Voc√™ escolheu a op√ß√£o 1: Problemas t√©cnicos ou erros no aplicativo.');
                await client.sendMessage(msg.from, 'Se sua d√∫vida n√£o foi resolvida, por favor digite 5 para falar diretamente com o suporte.');
                break;


            case '2':
                await client.sendMessage(msg.from, 'Voc√™ escolheu a op√ß√£o 2: D√∫vidas sobre funcionalidades e uso do aplicativo.');
                await client.sendMessage(msg.from, 'Se sua d√∫vida n√£o foi resolvida, por favor digite 5 para falar diretamente com o suporte.');
                break;


            case '3':
                await client.sendMessage(msg.from, 'Voc√™ escolheu a op√ß√£o 3: Quest√µes relacionadas a pagamentos e assinaturas.');
                await client.sendMessage(msg.from, 'Se sua d√∫vida n√£o foi resolvida, por favor digite 5 para falar diretamente com o suporte.');
                break;


            case '4':
                await client.sendMessage(msg.from, 'Voc√™ escolheu a op√ß√£o 4: Tutorial sobre o nosso app ');  
                await client.sendMessage(msg.from, 'Ol√°! ü´∂üèª Para acessar nosso tutorial, siga estas etapas simples: baixe o v√≠deo que enviamos como documento e assista no conforto do seu celular. ');  
                await client.sendMessage(msg.from, '√â f√°cil e r√°pido! Se tiver alguma d√∫vida, estou √† disposi√ß√£o para ajudar');  
                await client.sendMessage(msg.from, 'Se sua d√∫vida n√£o foi resolvida, por favor digite 5 para falar diretamente com o suporte.');  
                const videoPath = path.join(__dirname, './Foda-se Vers√£o Roblox Meme (360p).mp4');
                const media = MessageMedia.fromFilePath(videoPath);
                await client.sendMessage(msg.from, media, { sendMediaAsDocument: true });
                break;


            case '5':
                await client.sendMessage(msg.from, 'Voc√™ escolheu a op√ß√£o 5: Falar diretamente com o suporte Nix.\nVoc√™ pode come√ßar a conversa agora!');
                await client.sendMessage(msg.from, 'Entendemos sua quest√£o e j√° estamos cuidando dela com toda a aten√ß√£o. Fique tranquilo, sua solicita√ß√£o est√° em boas m√£os e ser√° resolvida o mais breve poss√≠vel. ');
                await client.sendMessage(msg.from, 'Agradecemos pela sua paci√™ncia e confian√ßa em nosso suporte.');
                

                // Lidar com o di√°logo do cliente
                client.on('message', async msg => {
                    if (msg.body.toLowerCase() === 'sair') {
                        await client.sendMessage(msg.from, 'A conversa foi encerrada. Obrigado por entrar em contato conosco.');
                        client.removeListener('message', handleUserResponse);
                        clearTimeout(typingTimer); // Cancelar o temporizador se o cliente encerrar a conversa
                    } else {
                        // Aqui voc√™ pode lidar com as mensagens enviadas pelo cliente
                        await client.sendMessage(msg.from, 'Voc√™ disse: ' + msg.body);
                    }
                    
                });
                
                break;


            default:
                if (typingTimer) clearTimeout(typingTimer); // Limpar o temporizador se houver qualquer entrada
                await client.sendMessage(msg.from, 'Op√ß√£o inv√°lida. Por favor, responda com um n√∫mero')
            }
        }
    }

client.initialize();
        